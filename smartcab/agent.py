import random
import math
from operator import itemgetter
import environment
import planner
import simulator

class LearningAgent(environment.Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = planner.RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        # Extra stuff for tracking how we're doing.
        self.trial_number = 1

    def get_percent_mapped(self):
        """Get the percentage of `self.Q` that is in a non-default state."""
        if not self.Q:
            return 0

        n_mapped = 0
        n_total = 0
        for action_map in self.Q.itervalues():
            for val in action_map.values():
                n_mapped += val != 0
                n_total += 1
        percent_mapped = float(n_mapped) / n_total
        print "Mapped %s%% of self.Q (%d of %d)" % (percent_mapped, n_mapped, n_total)
        return percent_mapped

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        percent_mapped = self.get_percent_mapped()

        # self.epsilon = math.cos(.5 * self.trial_number)
        # self.epsilon = 1. / (self.trial_number ** .75)
        # self.epsilon = self.epsilon - .01
        self.epsilon = (
            0.
            if percent_mapped > 0.98 or (self.trial_number > 1000)
            else 1.)

        if testing:
            self.epsilon = self.alpha = 0

        self.trial_number += 1

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        unused_deadline = self.env.get_deadline(self)  # Remaining deadline

        # Set 'state' as a tuple of relevant data for the agent
        return (
            waypoint,  # The direction of the shortest distance to our destination
            inputs['light'],  # the color of the traffic light
            inputs['left'],  # the intended direction of travel for a vehicle to the Smartcab's left
            inputs['oncoming'],  # the intended direction of travel for a vehicle across the intersection from the Smartcab
        )

    def get_maxQ(self, state):
        """ The get_maxQ function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        return max(self.Q[state].itervalues())  # .values() for python3.x

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent."""
        if state not in self.Q:
            self.Q[state] = dict.fromkeys(self.valid_actions, 0.0)

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state

        if not self.learning or random.random() < self.epsilon:
            return random.choice(self.valid_actions)
        else:
            # We need to get the state with maximal Q.
            max_q = self.get_maxQ(state)

            # Randomly choose one of the states with maximal Q.
            this_state = self.Q[state]
            actions = [a for a in self.valid_actions if this_state[a] == max_q]
            return random.choice(actions)

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            q = self.Q[state]
            q[action] = (1. - self.alpha) * q[action] + (self.alpha * reward)

    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    # Lets make things predictable for now...
    random.seed(8675309)

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = environment.Environment(verbose=False)

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, alpha=.15)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = simulator.Simulator(
        env,
        display=False,
        update_delay=.001,
        log_metrics=True,
        optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10)


    # Print some stuff, just to see how the algorithm worked.
    print
    print 'Number of states:', len(agent.Q)

    print
    import pprint
    pprint.pprint(agent.Q)


if __name__ == '__main__':
    run()
